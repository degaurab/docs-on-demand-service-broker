---
title: Creating a Service Release
owner: London Services Enablement
---

This topic provides information for service authors about how to create a service
release for an on-demand service tile.


## <a id="what-is-required-of-the-service-authors"></a> Service Author Deliverables

Service authors provide the following:

- The Service Release. For more information, see [Overview](#create-a-service-release) below.

- The Service Adapter. For more information, see [Creating a Service Adapter](./service-adapter.html).

- Documentation for the operator to configure plan definitions for the Service Adapter.

- Documentation for the operator to backup and restore service instances.


## <a id="create-a-service-release"></a>Overview

A service release is a BOSH release of the service that you want to create on-demand instances of.
The on-demand broker (ODB) deploys this release at instance creation time,
once for each service instance.

To create a service release, Pivotal recommends that you do the following:

1. [Package an Initial Service Release](#package-service)

2. Refine your release using the information in the following sections:
 - [Use Job Links](#job-links)
 - [Include Service Instance Lifecycle Errands](#service-instance-lifecycle-errands)

3. [Package the Final Service Release](#final-release)


## <a id="package-service"></a>Package an Initial Service Release

Package an initial version of the BOSH release for your service to test whether
it deploys successfully.

To do so, create and manually deploy a BOSH release for the service by following
the instructions up to and including _Step 6: Create a Dev Release_ in
[Creating a Release](https://bosh.io/docs/create-release/) in the BOSH Documentation.

<p class="note"><strong>Note: </strong>
  Pivotal recommends that you create sample manifests that deploy the service release(s).
  This helps you to write the <code>generate-manifest</code> component of the Service Adapter.
  For how to write a manifest, see <a href="./operating.html#broker-manifest">Write a Broker Manifest</a>.</p>

Example service releases:

* [redis-example-service-release](https://github.com/pivotal-cf-experimental/redis-example-service-release)
* [kafka-example-service-release](https://github.com/pivotal-cf-experimental/kafka-example-service-release)


## <a id="job-links"></a>Use Job Links

When generating a manifest, Pivotal recommends that you do not use static IP addresses.
This is because network IP management can become complex for services with
multiple instance groups.
Instead, Pivotal recommends that you use BOSH's job links feature.

For how to use job links, see
[Links](https://bosh.io/docs/links.html) in the BOSH documentation.

For an example, see the [kafka-example-service-release](https://github.com/pivotal-cf-experimental/kafka-example-service-release/blob/master/jobs/kafka_server/spec#L15)
on GitHub.
This uses implicit job links to get the IP addresses of the brokers and the zookeeper.


## <a id="service-instance-lifecycle-errands"></a>Include Service Instance Lifecycle Errands

 <p class="note"><strong>Note</strong>: This feature requires BOSH Director v261 or later.</p>

Service instance lifecycle errands allow additional short-lived jobs to run as
part of service instance deployment.
A deployment is only considered successful if along with the deployment all
lifecycle errands complete successfully.
For more information about errands, see [Errands](https://docs.pivotal.io/tiledev/tile-errands.html).

A service release can provide job errands that ODB uses during the management of
an instance lifecycle.
Operators configure these errands in the deployment manifest or in the tile.
For how operators configure service instance lifecycle errands, see
[Enable Service Instance Lifecycle Errands](./operating.html#enable-errands).

ODB supports the following service instance lifecycle errands:

- **Post-deploy**: These errands run after the creating or updating a service instance.
  An example use case is running a health check to ensure the service instance is functioning.<br>
  To see the workflow for post deploy errands, see
  [Create or Update Service Instance with Post-Deploy Errands](./concepts.html#post-deploy).
- **Pre-delete**: These errands run before the deletion of a service instance.
  An example use case is cleaning up data before a service shutdown. <br>
  To see the workflow for pre-delete errands, see [Delete a Service Instance with Pre-Delete Errand](./concepts.html#pre-delete).

To include lifecycle errands in your service release, do the following:

1. Decide what errands your on-demand service needs.
For example, you could create a health check post-deploy errand using the criteria
that you used to test the initial release.

1.  Write code to run each lifecycle errand and define them as jobs in the service release.
For how to do so, see the [Using Errands](https://bosh.io/docs/errands.html) in the BOSH documentation.

<p class="note"><strong>Note: </strong>If you are using the <code>generate-manifest</code> command, you must validate and include
any supported errands in the instance groups array that are passed into the plan parameter.
For more information about this command, see <a href="./adapter-reference.html#generate-manifest">generate-manifest</a>.</p>

For an example implementation of a health check post-deploy errand, see the
[redis-example-service-release](https://github.com/pivotal-cf-experimental/redis-example-service-release/tree/master/jobs/health-check)
on GitHub.

### <a id="colocated-errands"></a>Colocated Errands

<p class="note"><strong>Note</strong>: This feature requires BOSH Director v263 or later.</p>

Colocated errands run on an existing service instance group, avoiding additional
resource allocation.
Both `post-deploy` and `pre-delete` errands can be run as colocated errands.

To enable a new colocated errand, add the errand to the list of jobs of an instance group.


## <a id="final-release"></a>Package the Final Service Release

To package the final release, follow the instructions in [Create a Final Release](https://bosh.io/docs/create-release/#final-release) in the BOSH documentation.

The operator colocates this release with the ODB release in the broker manifest,
or a service author needs it when creating an on-demand service tile.
For more information, see [Write a Broker Manifest](./operating.html#broker-manifest) or
[Creating an On-Demand Service Tile](tile.html).
