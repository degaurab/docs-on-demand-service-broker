---
title: Broker and Service Management
owner: London Services Enablement
---

This topic describes how to manage your broker and service plans.

## <a id="management"></a>Broker Management

This section describes how to manage your broker with BOSH errands.
You can run these errands using the BOSH CLI.

### <a id="register-broker"></a> Register Broker

The `register-broker` errand registers the broker with Cloud Foundry
and enables access to plans in the service catalog. Run this errand
whenever the broker is re-deployed with new catalog metadata to update
the Cloud Foundry catalog.

#### Add the Errand to the Manifest

To add the `register-broker` errand to the manifest, do the following.

1. Add the following instance group to your manifest:

    ```yaml
    - name: register-broker
      lifecycle: errand
      instances: 1
      jobs:
        - name: register-broker
          release: ODB-RELEASE-NAME
          properties:
            broker_name: BROKER-NAME
            broker_uri: BROKER-URI # optional, only required when a route has been registered
            disable_ssl_cert_verification: TRUE|FALSE # defaults to false
            enable_service_access: TRUE|FALSE # defaults to true
            cf_service_access: ENABLE|DISABLE|MANUAL #optional, defaults to enable
            cf:
              api_url: CF-API-URL
              admin_username: CF-API-ADMIN-USERNAME
              admin_password: CF-API-ADMIN-PASSWORD
      vm_type: VM-TYPE
      stemcell: STEMCELL
      networks: [NETWORK]
      azs: [AZ]
    ```
      - If the `broker_uri` property is set, you must register a route for your broker with Cloud Foundry. See the [Route Registration](./operating.html#route) section for more details.
      - When `enable_service_access`: `false` is set, the errand does not change service access for any plan.
      - You can enable individual plans by using the optional `cf_service_access` property. The values accepted are the following:
        - `enable`: the errand enables access for that plan. This is the default value.
        - `disable`: the errand disables access for that plan
        - `manual`: the errand performs no action.

        Only Cloud Foundry admin users can see plans with disabled service access. Org Managers and Space Managers cannot see these plans.

#### Run the Errand

To run the `register-broker` errand, do the following.

1. Run the command:

    ```
    bosh -d DEPLOYMENT-NAME run-errand register-broker
    ```

    Where:
    - `DEPLOYMENT-NAME` is the name of your deployment.

    For example:

    <pre class="terminal">
    $ bosh -d cf run-errand register-broker
    </pre>

### <a id="delete-instances"></a>Delete All Service Instances

<p class="note warning"><strong>WARNING:</strong> Use extreme caution when running this errand.
  You should only use it when you want to totally destroy all of the on-demand service instances
  from Cloud Foundry.</p>

The `delete-all-service-instances` errand deletes service instances of
your broker's service offering in every org and space of Cloud Foundry.
Because the errand uses the Cloud Controller API, it only deletes instances
the Cloud Controller knows about.

The errand does not delete orphan BOSH deployments, which do not correspond to a known service instance.
Orphan BOSH deployments should never happen, but in practice they do.
Use the [orphan-deployments errand](#listing-orphans) to identify them.

The errand does the following:

1. Unbinds all apps from the service instances.
1. Deletes all service instances sequentially. Each service instance deletion includes:
  1. Running any pre-delete errands
  1. Deleting the BOSH deployment of the service instance
  1. Removing any ODB-managed secrets from Credhub
  1. Checking for instance deletion failure, which results in the errand failing immediately
1. Determines whether any instances have been created while the errand was running.
If new instances are detected, the errand returns an error.
In this case, Pivotal recommends running the errand again.

#### Add the Errand to the Manifest

To add the `delete-all-service-instances` errand to the manifest, do the following.

1. Add the following instance group to your manifest:

    ```yaml
    - name: delete-all-service-instances
      lifecycle: errand
      instances: 1
      jobs:
        - name: delete-all-service-instances
          release: ODB-RELEASE-NAME
          properties:
            polling_interval_seconds: INTERVAL-IN-SECONDS # defaults to 60
            polling_initial_offset_seconds: OFFSET-IN-SECONDS # defaults to 5

      vm_type: VM-TYPE
      stemcell: STEMCELL
      networks: [{name: NETWORK}]
      azs: [AZ]
    ```

    Where:
    * `INTERVAL-IN-SECONDS`: The interval in seconds before a service instance is deleted.
    * `OFFSET-IN-SECONDS`: The offset in seconds before polling Cloud Foundry to check
    if the instance has been deleted.

       <div class="note"><strong>Notes</strong>:
        <ul>
          <li>The <code>polling\_interval\_seconds</code> default is set to 60 seconds
          because the Cloud Controller itself polls the on-demand broker every 60 seconds.
          Setting your polling interval to anything lower than 60 seconds does not speed up the errand.</li>
          <li>The <code>polling\_initial\_offset_seconds</code> default is set to 5 seconds.
          In systems with more load, consider increasing the polling offset.</li>
        </ul>
        </div>

#### Run the Errand

To run the `delete-all-service-instances` errand, do the following.

1. Run the command:

    ```
    bosh -d DEPLOYMENT-NAME run-errand \
    delete-all-service-instances
    ```

    Where:
    - `DEPLOYMENT-NAME` is the name of your deployment.

    For example:

    <pre class="terminal">
    $ bosh -d cf run-errand \
    delete-all-service-instances
    </pre>

### <a id="deregister-broker"></a>Deregister Broker

The `deregister-broker` errand deregisters a broker from Cloud Foundry.
It requires that there are no existing service instances.

#### Add the Errand to the Manifest

To add the `deregister-broker` errand to the manifest, do the following.

1. Add the following instance group to your manifest:

    ```yaml
    - name: deregister-broker
      lifecycle: errand
      instances: 1
      jobs:
        - name: deregister-broker
          release: ODB-RELEASE-NAME
          properties:
            broker_name: BROKER-NAME
      vm_type: VM-TYPE
      stemcell: STEMCELL
      networks: [{name: SERVICE-NETWORK}]
      azs: [AZ]
    ```

#### Run the Errand

To run the `deregister-broker` errand, do the following.

1. Run the command:

    ```
    bosh -d DEPLOYMENT-NAME run-errand deregister-broker
    ```

    Where:
    *  `DEPLOYMENT-NAME` is the name of your deployment.

    For example:

    <pre class="terminal">
    $ bosh -d cf run-errand deregister-broker
    </pre>

### <a id="delete-instances-and-deregister"></a>Delete All Service Instances and Deregister Broker

<p class="note warning"><strong>WARNING:</strong> Use extreme caution when running this errand. You should only use it when you want to destroy all of the on-demand service instances and deregister the broker from Cloud Foundry.</p>

The `delete-all-service-instances-and-deregister-broker` errand performs a similar operation to the
errands [delete-all-service-instances](#delete-instances) and [deregister-broker](#deregister-broker).

This errand does the following:

1. Disables service access to the service offering for all orgs and spaces. The errand disables service
access to ensure that new instances cannot be provisioned during the lifetime of the errand.
1. Unbinds all apps from the service instances.
1. Deletes all service instances sequentially. Each service instance deletion includes:
  1. Running any pre-delete errands
  1. Deleting the BOSH deployment of the service instance
  1. Removing any ODB-managed secrets from Credhub
  1. Checking for instance deletion failure, which results in the errand failing immediately
1. Determines whether any instances have been created while the errand was running.
If new instances are detected, the errand returns an error.
In this case, Pivotal recommends running the errand again.
1. Deregisters the broker from Cloud Foundry.

#### Add the Errand to the Manifest

To add the `delete-all-service-instances-and-deregister-broker` errand to the manifest,
do the following.

1. Add the following instance group to your manifest:

    ```yaml
    - name: delete-all-service-instances-and-deregister-broker
      lifecycle: errand
      instances: 1
      jobs:
        - name: delete-all-service-instances-and-deregister-broker
          release: ODB-RELEASE-NAME
          properties:
            broker_name: BROKER-NAME
            polling_interval_seconds: INTERVAL-IN-SECONDS # defaults to 60
            polling_initial_offset_seconds: OFFSET-IN-SECONDS # defaults to 5

      vm_type: VM-TYPE
      stemcell: STEMCELL
      networks: [{name: NETWORK}]
      azs: [AZ]
    ```

      Where:
      * `INTERVAL-IN-SECONDS`: The interval in seconds before a service instance is deleted.
      * `OFFSET-IN-SECONDS`: The offset in seconds before polling Cloud Foundry to check
      if the instance has been deleted.

       <div class="note"><strong>Notes</strong>:
        <ul>
          <li>The <code>polling\_interval\_seconds</code> default is set to 60 seconds
          because the Cloud Controller itself polls the on-demand broker every 60 seconds.
          Setting your polling interval to anything lower than 60 seconds does not speed up the errand.</li>
          <li>The <code>polling\_initial\_offset_seconds</code> default is set to 5 seconds.
          In systems with more load, consider increasing the polling offset.</li>
        </ul>
        </div>

#### Run the Errand

To run the  `delete-all-service-instances-and-deregister-broker` errand, do the following.

1. Run the command:

    ```
    bosh -d DEPLOYMENT-NAME run-errand \
    delete-all-service-instances-and-deregister-broker
    ```

    Where:
    - `DEPLOYMENT-NAME` is the name of your deployment.

    For example:

    <pre class="terminal">
    $ bosh -d cf run-errand \
    delete-all-service-instances-and-deregister-broker
    </pre>


### <a id="orphan-deployments"></a> Orphan Deployments

<p class="note"><strong>Note:</strong> The deployment for a service instance is orphaned when the BOSH
deployment is still running but the service is no longer registered in
Cloud Foundry.</p>

The `orphan-deployments` errand lists service deployments that
have no matching service instances in Cloud Foundry and returns the list to the
operator.

#### Add the Errand to the Manifest

To add the `orphan-deployments` errand to the manifest, do the following.

1. Add the following instance group to your manifest:

    ```yaml
    - name: orphan-deployments
      lifecycle: errand
      instances: 1
      jobs:
      - name: orphan-deployments
        release: ODB-RELEASE-NAME
      vm_type: VM-TYPE
      stemcell: STEMCELL
      networks: [{name: NETWORK}]
      azs: [AZ]
    ```

#### Run the Errand

To run the `orphan-deployments` errand, do the following.

1. Run the command:

    ```
    bosh -d DEPLOYMENT-NAME run-errand orphan-deployments
    ```

    Where:
    - `DEPLOYMENT-NAME` is the name of your deployment.

    For example:
    <pre class="terminal">
    $ bosh -d cf run-errand orphan-deployments
    </pre>

1. See if orphan deployments are present. If orphan deployments are present, the errand outputs
a list that resembles the following:

    <pre class="terminal">
    [stdout]
    [{"deployment_name":"service-instance_aoeu39fgn-8125-05h2-9023-9vbxf7676f3"}]
    [stderr]
    None
    Errand 'orphan-deployments' completed successfully (exit code 0)
    </pre>

#### Delete an Orphan Deployment

<%# Need technical clarification for the note below from the ODB team. %>
<p class="note warning"><strong>WARNING:</strong> Deleting the BOSH deployment destroys the VM.
  Any data present is lost.</p>

To delete an orphan deployment, do the following:

1. Run the command:

    ```
    bosh -d DEPLOYMENT-NAME delete-deployment
    ```

    Where:
    - `DEPLOYMENT-NAME` is the name of the orphaned deployment returned in the output of the errand.

    For example:

    <pre class="terminal">
    bosh -d service-instance_aoeu39fgn-8125-05h2-9023-9vbxf7676f3 \
    delete-deployment
    </pre>

## <a id="update-service-plans"></a> Service Management

This section describes how to manage and modify your service plans.

### <a id="update-broker"></a>Modify the Broker

To modify the [core broker configuration](./operating.html#core-broker-config), do the following.

1. Make any necessary changes to the core broker configuration in the broker manifest.
1. Deploy the broker.

### <a id="updating-service-offering"></a>Modify the Service Offering

To modify the service offering, do the following.

1. Change properties in the `service_catalog` of the broker manifest. For example, update the
service metadata.

1. Run the "register broker" errand to update the Cloud Foundry marketplace.
For how to run the errand, see [Register Broker](#register-broker) above.

1. Run the "upgrade all service instances" errand to apply updated plans to
existing service instances.
For how to run the errand, see [Upgrade All Service Instances](./troubleshooting.html#upgrade-all).

1. Change properties in the `service_deployment` of the broker manifest. For example, update
the jobs used from a service release.

1. Deploy the broker.

<p class="note warning"><strong>WARNING</strong>: When Cloud Foundry registers the broker, do not
  change <code>service_id</code> or <code>plan_id</code> for any plan.</p>

### <a id="disabling-service-plans"></a>Disable Service Plans

To disable access to a service plan, do the following.

1. Run the following command:

    ```
    cf disable-service-access SERVICE-NAME-FROM-CATALOG -p PLAN-NAME
    ```

    Where:
    * `SERVICE-NAME-FROM-CATALOG` is the name of the service from the service catalog.
    * `PLAN-NAME` is the name of the plan you want to disable.

    For example:

    <pre class="terminal">
    cf disable-service-access my-service -p small
    </pre>

<p class="note"><strong>Note:</strong> When a plan has the property <code>cf_service_access:
  disable</code> in the <code>service_catalog</code> the <a href="#register-broker">Register Broker</a> errand disables service access to that plan.</p>

### <a id="remove-plans"></a>Remove Service Plans

You can remove service plans if there are no instances using the plan.

To remove a plan, do the following:

1. Remove the service plan from the broker manifest.
1. Run the [Register Broker](#register-broker) errand to update the Marketplace.

<p class="note warning"><strong>WARNING</strong>: If any service instances remain on a plan
  that has been removed from the catalog, the On-Demand Service Broker fails to start.</p>

